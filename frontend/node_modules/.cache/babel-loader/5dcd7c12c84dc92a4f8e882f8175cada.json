{"ast":null,"code":"var _jsxFileName = \"/Users/amandadargenio/java-react/fullstack-practice/groceriest/src/components/Item.js\",\n    _s2 = $RefreshSig$();\n\nimport { SimpleGrid, Box, Text, Editable, EditableInput, EditablePreview } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport API from \"../api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Item = () => {\n  _s2();\n\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getAllItems = async () => {\n    await API.getItems().then(response => {\n      console.log(response.data);\n      setItems(response.data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.log(err);\n    });\n  }; //     //src/components/Item.js\n  //   Line 20:15:  Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n  //   useEffect(() => {\n  //     async function fetchData() {\n  //       // You can await here\n  //       const response = await MyAPI.getData(someId);\n  //       // ...\n  //     }\n  //     fetchData();\n  //   }, [someId]); // Or [] if effect doesn't need props or state\n\n\n  useEffect(() => {\n    getAllItems();\n  }, [isLoading]);\n\n  function CustomControlsExample() {\n    var _s = $RefreshSig$();\n\n    /* Here's a custom control */\n    function EditableControls() {\n      _s();\n\n      const {\n        isEditing,\n        getSubmitButtonProps,\n        getCancelButtonProps,\n        getEditButtonProps\n      } = useEditableControls();\n      return isEditing ? /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        justifyContent: \"center\",\n        size: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          icon: /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 33\n          }, this),\n          ...getSubmitButtonProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          icon: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 33\n          }, this),\n          ...getCancelButtonProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"sm\",\n          icon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 43\n          }, this),\n          ...getEditButtonProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this);\n    }\n\n    _s(EditableControls, \"AjvWFdx4AZ4HazwLjF0lmuIeefQ=\", true);\n\n    return /*#__PURE__*/_jsxDEV(Editable, {\n      textAlign: \"center\",\n      defaultValue: \"Rasengan \\u26A1\\uFE0F\",\n      fontSize: \"2xl\",\n      isPreviewFocusable: false,\n      children: [/*#__PURE__*/_jsxDEV(EditablePreview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(EditableInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(EditableControls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      margin: 10,\n      spacingX: \"40px\",\n      spacingY: \"20px\",\n      children: items ? items.map(item => /*#__PURE__*/_jsxDEV(Box, {\n        boxShadow: \"dark-lg\",\n        rounded: \"md\",\n        boxSize: \"100%\",\n        height: 150,\n        width: 80,\n        padding: 5,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: item.quantity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: item.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this); // if (items.length) {\n  //     return (\n  //         <div>\n  //             {items.map((item, index) => {\n  //                 <div\n  //                     key={index}>\n  //                     <div>\n  //                         {item.name}\n  //                     </div>\n  //                 </div>\n  //             })}\n  //         </div>\n  //     )\n  // } else {\n  //     return <div>Loading</div>\n  // }\n  //     <SimpleGrid\n  //   columns={{ sm: 1, md: 3 }} spacing={10}>\n  //         {items ? (items.map((item) => {\n  //             <Box\n  //             backgroundColor=\"white\"\n  //             key={item.id}>\n  //                 <Text\n  //                 textColor=\"white\"\n  //                 >{item.name}</Text>\n  //                 <Text>{item.quantity}</Text>\n  //                 <Text>{item.price}</Text>\n  //             </Box>\n  //         })\n  // ) : ( \n  //     <div>hELLO</div>\n  // )}\n  //     </SimpleGrid>\n};\n\n_s2(Item, \"mcrZo4YemGCEUcnbKDFRdh7WECQ=\");\n\n_c = Item;\nexport default Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["/Users/amandadargenio/java-react/fullstack-practice/groceriest/src/components/Item.js"],"names":["SimpleGrid","Box","Text","Editable","EditableInput","EditablePreview","useEffect","useState","API","Item","items","setItems","isLoading","setIsLoading","getAllItems","getItems","then","response","console","log","data","catch","err","CustomControlsExample","EditableControls","isEditing","getSubmitButtonProps","getCancelButtonProps","getEditButtonProps","useEditableControls","map","item","name","quantity","price","id"],"mappings":"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","sourcesContent":["import { SimpleGrid, Box, Text, Editable, EditableInput, EditablePreview } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport API from \"../api/index\";\n\n\nconst Item = () => {\n\n    const [items, setItems] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    const getAllItems = async () => {\n        await API.getItems()\n            .then(response => {\n                console.log(response.data);\n                setItems(response.data);\n                setIsLoading(false);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n    //     //src/components/Item.js\n    //   Line 20:15:  Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\n    //   useEffect(() => {\n    //     async function fetchData() {\n    //       // You can await here\n    //       const response = await MyAPI.getData(someId);\n    //       // ...\n    //     }\n    //     fetchData();\n    //   }, [someId]); // Or [] if effect doesn't need props or state\n\n    useEffect(() => {\n        getAllItems();\n    }, [isLoading]);\n\n    function CustomControlsExample() {\n        /* Here's a custom control */\n        function EditableControls() {\n          const {\n            isEditing,\n            getSubmitButtonProps,\n            getCancelButtonProps,\n            getEditButtonProps,\n          } = useEditableControls()\n      \n          return isEditing ? (\n            <ButtonGroup justifyContent=\"center\" size=\"sm\">\n              <IconButton icon={<CheckIcon />} {...getSubmitButtonProps()} />\n              <IconButton icon={<CloseIcon />} {...getCancelButtonProps()} />\n            </ButtonGroup>\n          ) : (\n            <Flex justifyContent=\"center\">\n              <IconButton size=\"sm\" icon={<EditIcon />} {...getEditButtonProps()} />\n            </Flex>\n          )\n        }\n      \n        return (\n          <Editable\n            textAlign=\"center\"\n            defaultValue=\"Rasengan ⚡️\"\n            fontSize=\"2xl\"\n            isPreviewFocusable={false}\n          >\n            <EditablePreview />\n            <EditableInput />\n            <EditableControls />\n          </Editable>\n        )\n      }\n    return (\n        <div>\n            <SimpleGrid\n                columns={2}\n                margin={10}\n                spacingX=\"40px\" spacingY=\"20px\"\n            >\n                {items ? (\n                    items.map(item => (\n                        <Box\n                            boxShadow=\"dark-lg\"\n                            rounded=\"md\"\n                            boxSize=\"100%\"\n                            height={150}\n                            width={80}\n                            padding={5}\n                            key={item.id}>\n\n                            <Text>\n                                {item.name}\n                            </Text>\n                            <Text>{item.quantity}</Text>\n                            <Text>{item.price}</Text>\n                        </Box>\n                    ))\n                ) : (\n                    <div>Loading</div>\n                )}\n\n            </SimpleGrid>\n        </div>\n    )\n\n\n    // if (items.length) {\n    //     return (\n    //         <div>\n    //             {items.map((item, index) => {\n    //                 <div\n    //                     key={index}>\n    //                     <div>\n    //                         {item.name}\n\n    //                     </div>\n    //                 </div>\n    //             })}\n    //         </div>\n    //     )\n    // } else {\n    //     return <div>Loading</div>\n    // }\n    //     <SimpleGrid\n    //   columns={{ sm: 1, md: 3 }} spacing={10}>\n\n    //         {items ? (items.map((item) => {\n    //             <Box\n    //             backgroundColor=\"white\"\n    //             key={item.id}>\n    //                 <Text\n    //                 textColor=\"white\"\n    //                 >{item.name}</Text>\n    //                 <Text>{item.quantity}</Text>\n    //                 <Text>{item.price}</Text>\n    //             </Box>\n    //         })\n    // ) : ( \n    //     <div>hELLO</div>\n    // )}\n    //     </SimpleGrid>\n\n\n}\n\nexport default Item;"]},"metadata":{},"sourceType":"module"}