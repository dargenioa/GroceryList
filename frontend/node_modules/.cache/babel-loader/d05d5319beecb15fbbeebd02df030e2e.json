{"ast":null,"code":"var _jsxFileName = \"/Users/amandadargenio/java-react/fullstack-practice/groceriest/src/components/Item.js\",\n    _s = $RefreshSig$();\n\nimport { SimpleGrid, Box, Text } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport API from \"../api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Item = () => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getAllItems = async () => {\n    await API.getItems().then(response => {\n      console.log(response.data);\n      setItems(response.data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.log(err);\n    });\n  }; //     //src/components/Item.js\n  //   Line 20:15:  Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n  //   useEffect(() => {\n  //     async function fetchData() {\n  //       // You can await here\n  //       const response = await MyAPI.getData(someId);\n  //       // ...\n  //     }\n  //     fetchData();\n  //   }, [someId]); // Or [] if effect doesn't need props or state\n\n\n  useEffect(() => {\n    getAllItems();\n  }, [isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 3,\n      spacingX: \"40px\",\n      spacingY: \"20px\",\n      children: items ? items.map(item => /*#__PURE__*/_jsxDEV(Box, {\n        height: \"80px\",\n        children: [\" \", item.name]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this); // if (items.length) {\n  //     return (\n  //         <div>\n  //             {items.map((item, index) => {\n  //                 <div\n  //                     key={index}>\n  //                     <div>\n  //                         {item.name}\n  //                     </div>\n  //                 </div>\n  //             })}\n  //         </div>\n  //     )\n  // } else {\n  //     return <div>Loading</div>\n  // }\n  //     <SimpleGrid\n  //   columns={{ sm: 1, md: 3 }} spacing={10}>\n  //         {items ? (items.map((item) => {\n  //             <Box\n  //             backgroundColor=\"white\"\n  //             key={item.id}>\n  //                 <Text\n  //                 textColor=\"white\"\n  //                 >{item.name}</Text>\n  //                 <Text>{item.quantity}</Text>\n  //                 <Text>{item.price}</Text>\n  //             </Box>\n  //         })\n  // ) : ( \n  //     <div>hELLO</div>\n  // )}\n  //     </SimpleGrid>\n};\n\n_s(Item, \"mcrZo4YemGCEUcnbKDFRdh7WECQ=\");\n\n_c = Item;\nexport default Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["/Users/amandadargenio/java-react/fullstack-practice/groceriest/src/components/Item.js"],"names":["SimpleGrid","Box","Text","useEffect","useState","API","Item","items","setItems","isLoading","setIsLoading","getAllItems","getItems","then","response","console","log","data","catch","err","map","item","name","id"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,QAAsC,kBAAtC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,cAAhB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMO,WAAW,GAAG,YAAY;AAC5B,UAAMN,GAAG,CAACO,QAAJ,GACDC,IADC,CACIC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAT,MAAAA,QAAQ,CAACM,QAAQ,CAACG,IAAV,CAAR;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KALC,EAMDQ,KANC,CAMMC,GAAD,IAAS;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH,KARC,CAAN;AASH,GAVD,CALe,CAgBf;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,WAAW;AACd,GAFQ,EAEN,CAACF,SAAD,CAFM,CAAT;AAIA,sBACI;AAAA,2BACI,QAAC,UAAD;AACA,MAAA,OAAO,EAAE,CADT;AAEA,MAAA,QAAQ,EAAC,MAFT;AAEgB,MAAA,QAAQ,EAAC,MAFzB;AAAA,gBAICF,KAAK,GACFA,KAAK,CAACa,GAAN,CAAUC,IAAI,iBACV,QAAC,GAAD;AACA,QAAA,MAAM,EAAC,MADP;AAAA,wBAEgBA,IAAI,CAACC,IAFrB;AAAA,SAEKD,IAAI,CAACE,EAFV;AAAA;AAAA;AAAA;AAAA,cADJ,CADE,gBAON;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ,CAhCe,CAqDf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGH,CA1FD;;GAAMjB,I;;KAAAA,I;AA4FN,eAAeA,IAAf","sourcesContent":["import { SimpleGrid, Box, Text } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport API from \"../api/index\";\n\nconst Item = () => {\n\n    const [items, setItems] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    const getAllItems = async () => {\n        await API.getItems()\n            .then(response => {\n                console.log(response.data);\n                setItems(response.data);\n                setIsLoading(false);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n    //     //src/components/Item.js\n    //   Line 20:15:  Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\n    //   useEffect(() => {\n    //     async function fetchData() {\n    //       // You can await here\n    //       const response = await MyAPI.getData(someId);\n    //       // ...\n    //     }\n    //     fetchData();\n    //   }, [someId]); // Or [] if effect doesn't need props or state\n\n    useEffect(() => {\n        getAllItems();\n    }, [isLoading]);\n\n    return(\n        <div>\n            <SimpleGrid\n            columns={3}\n            spacingX=\"40px\" spacingY=\"20px\"\n            >\n            {items ?  (\n                items.map(item => (\n                    <Box\n                    height=\"80px\"\n                    key={item.id}> {item.name}</Box>\n            ))\n        ) : (\n            <div>Loading</div>\n        )}\n\n            </SimpleGrid>\n         </div>\n    )\n\n\n    // if (items.length) {\n    //     return (\n    //         <div>\n    //             {items.map((item, index) => {\n    //                 <div\n    //                     key={index}>\n    //                     <div>\n    //                         {item.name}\n\n    //                     </div>\n    //                 </div>\n    //             })}\n    //         </div>\n    //     )\n    // } else {\n    //     return <div>Loading</div>\n    // }\n    //     <SimpleGrid\n    //   columns={{ sm: 1, md: 3 }} spacing={10}>\n\n    //         {items ? (items.map((item) => {\n    //             <Box\n    //             backgroundColor=\"white\"\n    //             key={item.id}>\n    //                 <Text\n    //                 textColor=\"white\"\n    //                 >{item.name}</Text>\n    //                 <Text>{item.quantity}</Text>\n    //                 <Text>{item.price}</Text>\n    //             </Box>\n    //         })\n    // ) : ( \n    //     <div>hELLO</div>\n    // )}\n    //     </SimpleGrid>\n\n\n}\n\nexport default Item;"]},"metadata":{},"sourceType":"module"}