{"ast":null,"code":"var _jsxFileName = \"/Users/amandadargenio/java-react/fullstack-practice/groceriest/src/components/Item.js\",\n    _s = $RefreshSig$();\n\nimport { SimpleGrid, Box, Text } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport API from \"../api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Item = () => {\n  _s();\n\n  const [items, setItems] = useState([]); //     //src/components/Item.js\n  //   Line 20:15:  Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n  //   useEffect(() => {\n  //     async function fetchData() {\n  //       // You can await here\n  //       const response = await MyAPI.getData(someId);\n  //       // ...\n  //     }\n  //     fetchData();\n  //   }, [someId]); // Or [] if effect doesn't need props or state\n\n  useEffect(() => {\n    const getAllItems = async () => {\n      await API.getItems().then(res => setItems(res.data));\n    };\n\n    getAllItems();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this) //     <SimpleGrid\n  //   columns={{ sm: 1, md: 3 }} spacing={10}>\n  //         {items ? (items.map((item) => {\n  //             <Box\n  //             backgroundColor=\"white\"\n  //             key={item.id}>\n  //                 <Text\n  //                 textColor=\"white\"\n  //                 >{item.name}</Text>\n  //                 <Text>{item.quantity}</Text>\n  //                 <Text>{item.price}</Text>\n  //             </Box>\n  //         })\n  // ) : ( \n  //     <div>hELLO</div>\n  // )}\n  //     </SimpleGrid>\n  ;\n};\n\n_s(Item, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n\n_c = Item;\nexport default Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["/Users/amandadargenio/java-react/fullstack-practice/groceriest/src/components/Item.js"],"names":["SimpleGrid","Box","Text","useEffect","useState","API","Item","items","setItems","getAllItems","getItems","then","res","data"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,QAAsC,kBAAtC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,cAAhB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CAFe,CAGnB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEID,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,WAAW,GAAG,YAAY;AAC5B,YAAMJ,GAAG,CAACK,QAAJ,GAAeC,IAAf,CAAqBC,GAAD,IAASJ,QAAQ,CAACI,GAAG,CAACC,IAAL,CAArC,CAAN;AACH,KAFD;;AAGCJ,IAAAA,WAAW;AACb,GALQ,EAKN,EALM,CAAT;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ,CAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAwBH,CA9CD;;GAAMH,I;;KAAAA,I;AAgDN,eAAeA,IAAf","sourcesContent":["import { SimpleGrid, Box, Text } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport API from \"../api/index\";\n\nconst Item = () => {\n\n    const [items, setItems] = useState([]);\n//     //src/components/Item.js\n//   Line 20:15:  Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       // You can await here\n//       const response = await MyAPI.getData(someId);\n//       // ...\n//     }\n//     fetchData();\n//   }, [someId]); // Or [] if effect doesn't need props or state\n\n    useEffect(() => {\n      const getAllItems = async () => {\n          await API.getItems().then((res) => setItems(res.data))\n      }\n       getAllItems();\n    }, []);\n\n    return (\n        <div>\n            \n        </div>\n    //     <SimpleGrid\n    //   columns={{ sm: 1, md: 3 }} spacing={10}>\n          \n    //         {items ? (items.map((item) => {\n    //             <Box\n    //             backgroundColor=\"white\"\n    //             key={item.id}>\n    //                 <Text\n    //                 textColor=\"white\"\n    //                 >{item.name}</Text>\n    //                 <Text>{item.quantity}</Text>\n    //                 <Text>{item.price}</Text>\n    //             </Box>\n    //         })\n    // ) : ( \n    //     <div>hELLO</div>\n    // )}\n    //     </SimpleGrid>\n    )\n\n}\n\nexport default Item;"]},"metadata":{},"sourceType":"module"}